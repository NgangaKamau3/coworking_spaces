# Generated by Django 4.2.7 on 2025-07-25 14:43

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0001_initial'),
        ('venues', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='IoTSensor',
            fields=[
                ('sensor_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('sensor_external_id', models.CharField(max_length=100, unique=True)),
                ('sensor_type', models.CharField(choices=[('occupancy', 'Occupancy Sensor'), ('temperature', 'Temperature Sensor'), ('humidity', 'Humidity Sensor'), ('air_quality', 'Air Quality Sensor'), ('noise_level', 'Noise Level Sensor')], max_length=20)),
                ('location_description', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('space', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='venues.space')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='venues.venue')),
            ],
        ),
        migrations.CreateModel(
            name='EnvironmentalData',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField()),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('air_quality_index', models.IntegerField(blank=True, null=True)),
                ('noise_level', models.FloatField(blank=True, null=True)),
                ('light_level', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='environmental_data', to='venues.space')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BookingVerification',
            fields=[
                ('verification_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('no_show', 'No Show'), ('early_departure', 'Early Departure'), ('overstay', 'Overstay')], default='pending', max_length=20)),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('occupancy_verified', models.BooleanField(default=False)),
                ('verification_data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='iot_verification', to='bookings.booking')),
            ],
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField()),
                ('value', models.FloatField()),
                ('unit', models.CharField(max_length=20)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_points', to='iot.iotsensor')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['sensor', 'timestamp'], name='iot_sensord_sensor__faae28_idx'), models.Index(fields=['timestamp'], name='iot_sensord_timesta_95f95f_idx')],
            },
        ),
        migrations.CreateModel(
            name='OccupancyEvent',
            fields=[
                ('event_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('entry', 'Entry'), ('exit', 'Exit'), ('occupancy_change', 'Occupancy Change')], max_length=20)),
                ('occupancy_count', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField()),
                ('sensor_data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookings.booking')),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occupancy_events', to='venues.space')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['space', 'timestamp'], name='iot_occupan_space_i_4edc69_idx'), models.Index(fields=['booking'], name='iot_occupan_booking_c3c0a8_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='iotsensor',
            index=models.Index(fields=['venue', 'sensor_type'], name='iot_iotsens_venue_i_af6b42_idx'),
        ),
        migrations.AddIndex(
            model_name='iotsensor',
            index=models.Index(fields=['space', 'sensor_type'], name='iot_iotsens_space_i_d0e7e2_idx'),
        ),
        migrations.AddIndex(
            model_name='environmentaldata',
            index=models.Index(fields=['space', 'timestamp'], name='iot_environ_space_i_354217_idx'),
        ),
    ]
